snippet script_path "get script file path" b
		script_path = os.path.dirname(os.path.realpath(__file__))

snippet root_path "get script file path" b
		root_path = os.path.dirname(os.path.realpath(__file__))

snippet optparse "optparse template for python2.6" b
		# Use this in prior python2.6
		import optparse
		parser = optparse.OptionParser()
		parser.add_option("-s", "--scan", action="store_true", dest="scan",
											help="scan branches")
		parser.add_option("-a", "--analyze", action="store_true", dest="analyze",
											help="analyze dependencies")
		parser.add_option("-c", "--conflict", action="store_true", dest="conflict",
											help="analyze conflicts")
		(options, args) = parser.parse_args()


snippet mkdirs "mkdir recursively" b 
		os.makedirs(${1:path}, exist_ok=True)


snippet mkdirs2.7 "mkdir recursively for python2" b 
		def mkdirs(path):
				try:
						os.makedirs(path)
				except OSError as exc:
						if exc.errno == errno.EEXIST and os.path.isdir(path):
								pass


snippet walk_dir "walk directory recursively" b
		for root, dirs, files in os.walk(path):
				for file in files:
					filename = os.path.join(root, file)
					print(filename)

				for subdir in dirs:
					#os.path.join(root, subdir)
					pass


snippet rm_rf "remove directory" b
		def remove_readonly(func, path, _):
				"Clear the readonly bit and reattempt the removal"
				os.chmod(path, stat.S_IWRITE)
				func(path)

		def rm_rf(path):
			try:
				shutil.rmtree(path, onerror=remove_readonly)
			except OSError as e:
				if e.errno != errno.ENOENT:
					raise

snippet argparse1 "argparse simple" b
		import argparse
		parser = argparse.ArgumentParser(description='Videos to images')
		# Positional arguments
		parser.add_argument('indir', type=str, help='Input dir for videos')
		parser.add_argument('outdir', type=str, help='Output dir for image')

		# Optional arguments
		parser.add_argument( '--my_optional', default=2, help='provide an integer (default: 2)')
		parser.add_argument("x", type=int, help="provide an integer")
		# count of v
		parser.add_argument("-v", "--verbosity", action="count", default=0)
		parser.add_argument('-a', '--arg', nargs='+', type=int)
		parser.add_argument( '--all',
					action = 'store_true',
					help		= 'Enable all supported completers',
					dest		= 'all_completers' )
		args = parser.parse_args()

snippet argparse2 "argparse count verbosity" b
		import argparse
		parser = argparse.ArgumentParser()
		parser.add_argument( '--msvc', type = int, choices = [ 12, 14, 15 ],
													default = 15, help = 'Choose the Microsoft Visual '
													'Studio version (default: %(default)s).' )
		parser.add_argument( '--all',
													action = 'store_true',
													help	 = 'Enable all supported completers',
													dest	 = 'all_completers' )

		parser.add_argument("x", type=int, help="the base")
		parser.add_argument("y", type=int, help="the exponent")
		parser.add_argument("-v", "--verbosity", action="count", default=0)
		#parser.add_argument('-a', '--arg', nargs='+', type=int)
		#print parser.parse_args()
		args = parser.parse_args()
		answer = args.x**args.y
		if args.verbosity >= 2:
				print "{} to the power {} equals {}".format(args.x, args.y, answer)
		elif args.verbosity >= 1:
				print "{}^{} == {}".format(args.x, args.y, answer)
		else:
				print answer

snippet devnull "import DEVNULL" b
		try:
				from subprocess import DEVNULL # py3k
		except ImportError:
				import os
				DEVNULL = open(os.devnull, 'wb')

snippet ifmain "main and ifmain" b
	def main():
		pass

	if __name__ == '__main__':
		sys.exit(main())


snippet ftp-down-upload "ftp download/upload file" b
		import ftplib
		 
		def getFile(ftp, filename):
				try:
						ftp.retrbinary("RETR " + filename ,open(filename, 'wb').write)
				except:
						print "Error"
		 
		def upload(ftp, file):
				ext = os.path.splitext(file)[1]
				if ext in (".txt", ".htm", ".html"):
						ftp.storlines("STOR " + file, open(file))
				else:
						ftp.storbinary("STOR " + file, open(file, "rb"), 1024)
		 
		ftp = ftplib.FTP("127.0.0.1")
		ftp.login("username", "password")
		 
		ftp.cwd('/pub/')				 # change directory to /pub/
		upload(ftp, "README.nluug")
		getFile(ftp,'README.nluug')
		ftp.quit()


snippet is_python_64bit "detect python architecture"
		def is_python_64bit():
			return (struct.calcsize("P") == 8)

snippet is_windows_64bit "detect Windows architecture"
		def is_windows_64bit():
				if 'PROCESSOR_ARCHITEW6432' in os.environ:
						return True
				return os.environ['PROCESSOR_ARCHITECTURE'].endswith('64')


snippet py3and2.7 "python3 (compatible with py2.7) imports" b
		from __future__ import print_function
		from __future__ import division
		from __future__ import unicode_literals
		from __future__ import absolute_import

		PY_MAJOR, PY_MINOR = sys.version_info[ 0 : 2 ]
		if not ( ( PY_MAJOR == 2 and PY_MINOR >= 7 ) or
						 ( PY_MAJOR == 3 and PY_MINOR >= 6 ) or
						 PY_MAJOR > 6 ):
			sys.exit( 'This scripts requires Python >= 2.7 or >= 3.6; '
								'your version of Python is ' + sys.version )


snippet FindExecutable "Find executable file in PATH" b
		def FindExecutable( executable ):
			# Executable extensions used on Windows
			WIN_EXECUTABLE_EXTS = [ '.exe', '.bat', '.cmd' ]

			paths = os.environ[ 'PATH' ].split( os.pathsep )
			base, extension = os.path.splitext( executable )

			if OnWindows() and extension.lower() not in WIN_EXECUTABLE_EXTS:
				extensions = WIN_EXECUTABLE_EXTS
			else:
				extensions = ['']

			for extension in extensions:
				executable_name = executable + extension
				if not os.path.isfile( executable_name ):
					for path in paths:
						executable_path = os.path.join(path, executable_name )
						if os.path.isfile( executable_path ):
							return executable_path
				else:
					return executable_name
			return None


snippet fileinuse "check if file in use" w
		try:
			open( p.join( xxx ), 'a' ).close()
		except IOError as error:
			if error.errno == errno.EACCES:
				sys.exit( 'ERROR: xxx is currently in use. ' )


snippet loggingInLib "logging in library" b
		import logging
		logging.getLogger(__name__).addHandler(logging.NullHandler())

snippet loggingInApp "logging in application" b
		import logging
		from logging.config import dictConfig

		logging_config = dict(
				version = 1,
				formatters = {
						'f': {'format':
									'%(asctime)s %(name)-12s %(levelname)-8s %(message)s'}
						},
				handlers = {
						'h': {'class': 'logging.StreamHandler',
									'formatter': 'f',
									'level': logging.DEBUG}
						},
				root = {
						'handlers': ['h'],
						'level': logging.DEBUG,
						},
		)

		dictConfig(logging_config)

		logger = logging.getLogger()
		# logger.debug('often makes a very good meal of %s', 'visiting tourists')


snippet rprint "rich.print"
	__import__("rich").print($0)

snippet py3req  "python interpreter version check"
		PY_MAJOR, PY_MINOR = sys.version_info[0:2]
		if not ((PY_MAJOR == 3 and PY_MINOR >= 8) or PY_MAJOR > 3):
				sys.exit('This scripts requires Python >= 3.8; '
								 'your version of Python is ' + sys.version)


snippet  urlparse "parse url"
		from urllib.parse import urlparse
		result = urlparse("$0:https:/www.google.com")


snippet  impgt "import gettext"
	from django.utils.translation import gettext as _


snippet  impgtl "import gettext_lazy"
	from django.utils.translation import gettext_lazy as _
